{"version":3,"sources":["redux/dialogsPageReducer.tsx","components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/NavBar/Navbar.module.css","components/common/FormsControls/FormsControls.module.css","components/NavBar/Navbar.tsx","components/Settings/Settings.tsx","components/Music/Music.tsx","components/News/News.tsx","api/api.tsx","redux/usersPageReducer.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/Users.tsx","assets/images/preloader_spinner.svg","components/common/Preloader/Preloader.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profilePageReducer.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/authReducer.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/appReducer.ts","redux/reduxStore.tsx","App.tsx","hoc/WithSuspense.tsx","reportWebVitals.js","index.tsx","utils/validators/validators.ts","components/common/FormsControls/FormsControls.tsx","components/Profile/MyPosts/Post/Post.module.css","hoc/WithAuthRedirect.tsx","components/common/Paginator/Paginator.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css"],"names":["SEND_MESSAGE","initialState","dialogs","id","name","messages","message","sendMessage","newMessageBody","type","dialogsPageReducer","state","action","body","length","module","exports","Navbar","className","classes","nav","item","to","activeClassName","activeLink","Settings","Music","News","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","delete","post","userId","profileAPI","getProfile","getUserStatus","updateStatus","status","put","authAPI","email","password","rememberMe","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unFollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingInProgress","UsersPageReducer","map","u","followed","filter","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","styles","paginator","onClick","p","selectedPage","pageNumber","User","user","userPhoto","follow","unFollow","avatar","src","photos","small","alt","disabled","some","Users","Preloader","style","position","top","textAlign","width","preloader_spinner","backgroundColor","getUsers","createSelector","usersPage","getUserPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","props","requestUsers","this","React","Component","compose","connect","userPage","dispatch","a","resultCode","items","totalCount","withAuthRedirect","ProfileStatus","editMode","setEditMode","setStatus","useEffect","value","onChange","e","currentTarget","autoFocus","onBlur","updateUserStatus","onDoubleClick","ProfileInfo","profile","descriptionBlock","large","ADD_POST","SET_USER_PROFILE","SET_STATUS","posts","likesCount","profilePageReducer","newPost","Date","getTime","newPostText","Post","imgWrapper","triangle","messageContent","likes","maxLength30","maxLengthCreator","MyPosts","memo","postsElements","reverse","postsBlock","AddPostReduxForm","onSubmit","addPost","reduxForm","form","handleSubmit","Field","component","Textarea","placeholder","validate","required","MyPostsContainer","profilePage","Profile","ProfileContainer","match","params","authorizedUserId","getUserProfile","authorization","isAuth","withRouter","Header","header","picture","loginBlock","login","logout","SET_USER_DATA","setAuthUserData","payLoad","getAuthUserData","HeaderContainer","LoginReduxForm","error","Input","formSummaryError","stopSubmit","_error","formData","INITIALIZED_SUCCESS","initialized","reducers","combineReducers","dialogsPage","usersPageReducer","initialization","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","DialogsContainer","lazy","App","initializeApp","basename","process","path","render","Suspense","fallback","AppContainer","MainApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","maxLength","input","meta","touched","hasError","formControl","formInputError","MSTP","restProps"],"mappings":"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","file":"static/js/main.b7016b44.chunk.js","sourcesContent":["// const UPDATE_NEW_MESSAGE_BODY = \"UPDATE-NEW-MESSAGE-BODY\"\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\"\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport type DialogPageType = {\r\n    dialogs: Array<DialogType>\r\n    messages: Array<MessageType>\r\n}\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nlet initialState =  {\r\n    dialogs: [\r\n        {id: 1, name: 'Pasha'},\r\n        {id: 2, name: 'Sasha'},\r\n        {id: 3, name: 'Alexej'},\r\n        {id: 4, name: 'Dima'},\r\n        {id: 5, name: 'Shizofreniya'},\r\n        {id: 6, name: 'freedom_Belarus'}\r\n    ],\r\n        messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 1, message: 'How r u'},\r\n        {id: 1, message: 'What is ur name'},\r\n        {id: 1, message: 'Любишь пёсиков? =)'},\r\n        {id: 1, message: 'London is a capital of great Britain'},\r\n        {id: 1, message: 'Live Belarus!'}\r\n    ]\r\n}\r\n\r\nconst dialogsPageReducer = (state: DialogPageType = initialState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case SEND_MESSAGE:{\r\n            let body = action.newMessageBody;\r\n            return  {\r\n                ...state,\r\n                messages: [...state.messages, {id: (state.messages.length), message: body}]\r\n            };\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof sendMessage>\r\n\r\nexport const sendMessage = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    }as const\r\n}\r\nexport default dialogsPageReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Users_avatar__1E43S\",\"selectedPage\":\"Users_selectedPage__3toN_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__42LeI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__1OJRE\",\"item\":\"Navbar_item__3b1r3\",\"activeLink\":\"Navbar_activeLink__1c9yx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1me51\",\"formInputError\":\"FormsControls_formInputError__YLUyv\",\"error\":\"FormsControls_error__OAITz\",\"formSummaryError\":\"FormsControls_formSummaryError__2NSNX\"};","import React from 'react';\r\nimport classes from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return <nav className={classes.nav}>\r\n        <div className={classes.item}><NavLink to=\"/profile\" activeClassName={classes.activeLink}>Profile</NavLink></div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/users\" activeClassName={classes.activeLink}>\r\n                Users</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/dialogs\" activeClassName={classes.activeLink}>\r\n                Messages</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/news\" activeClassName={classes.activeLink}>\r\n                News</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/music\" activeClassName={classes.activeLink}>\r\n                Music</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/settings\" activeClassName={classes.activeLink}>\r\n                Settings</NavLink>\r\n        </div>\r\n        <div className={classes.item}>\r\n            <NavLink to=\"/login\" activeClassName={classes.activeLink}>\r\n                Login</NavLink>\r\n        </div>\r\n    </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport classes from './Settings.module.css';\r\n\r\n\r\n\r\nconst Settings = () =>{\r\n    return(\r\n        <div>settings</div>\r\n    )\r\n}\r\nexport default Settings;","import React from 'react';\r\nimport classes from './Music.module.css';\r\n\r\n\r\n\r\nconst Music = () =>{\r\n    return(\r\n        <div>Music</div>\r\n    )\r\n}\r\nexport default Music;","import React from 'react';\r\n\r\n\r\nconst News = () =>{\r\n    return(\r\n        <div>News</div>\r\n    )\r\n}\r\nexport default News;","import axios from \"axios\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-Key\": \"77e3abfb-dd75-4904-b56a-e26f0cfa27af\"\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(response => {\r\n            return response.data;\r\n        });\r\n    },\r\n\r\n    unFollow(id: number) {\r\n        return instance.delete(`follow/${id}`).then(response => {\r\n            return response\r\n        });\r\n    },\r\n\r\n    follow(id: number) {\r\n        return instance.post(`follow/${id}`).then(response => {\r\n            return response\r\n        });\r\n    },\r\n\r\n    getProfile(userId: number) {\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId);\r\n    },\r\n\r\n    getUserStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId);\r\n    },\r\n\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/` , {status});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`, {\r\n            withCredentials: true\r\n        });\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./reduxStore\";\r\n\r\nconst FOLLOW = 'users/FOLLOW';\r\nconst UNFOLLOW = 'users/UNFOLLOW';\r\nconst SET_USERS = 'users/SET-USERS';\r\nconst SET_CURRENT_PAGE = 'users/SET-CURRENT-PAGE';\r\nconst SET_TOTAL_COUNT = 'users/SET-TOTAL-COUNT';\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE-ISFETCHING';\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'users/TOGGLE_IS_FOLLOWING_PROGRESS ';\r\n\r\n\r\nexport type UserType = {\r\n    name: string,\r\n    id: number,\r\n    uniqueUrlName: string | null,\r\n    photos: {\r\n        small: string | null,\r\n        large: string | null\r\n    },\r\n    followed: boolean,\r\n    status: string | null\r\n}\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 50,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>\r\n}\r\nexport type InitialType = typeof initialState\r\n\r\nexport const UsersPageReducer = (state: InitialType = initialState, action: ActionsType): InitialType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                // users: updateObjectInArray(state.users, action.userId, 'id', {followed: true} )\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {...state, users: action.users}\r\n\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n\r\n        case SET_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unFollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingInProgress>\r\n\r\nexport const followSuccess = (userId: number) => ({type: FOLLOW, userId} as const)\r\n\r\nexport const unFollowSuccess = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId: userId\r\n    } as const\r\n\r\n}\r\nexport const setUsers = (users: UserType[]) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_COUNT, totalUsersCount: totalUsersCount\r\n} as const)\r\n\r\n\r\nexport const toggleIsFetching = (isFetching: boolean) => ({\r\n    type: TOGGLE_IS_FETCHING, isFetching: isFetching\r\n} as const)\r\n\r\n\r\nexport const toggleFollowingInProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, userId\r\n} as const)\r\n\r\nexport type ThunkType = ThunkAction<void, RootReduxState, unknown, ActionsType>\r\n\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(currentPage));\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFetching(false));\r\n        dispatch(setUsers(data.items));\r\n        dispatch(setTotalUsersCount(data.totalCount));\r\n        dispatch(setCurrentPage(currentPage))\r\n    }\r\n}\r\n\r\n// const followUnfollowFlow = async (dispatch: Dispatch, id: number, apiMethod: () => void, actionCreator: () => void) => {\r\n//         dispatch(toggleFollowingInProgress(true, id));\r\n//\r\n// }\r\nexport const follow = (id: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, id));\r\n        let response = await usersAPI.follow(id)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(followSuccess(id))\r\n        }\r\n        dispatch(toggleFollowingInProgress(false, id));\r\n    }\r\n}\r\nexport const unFollow = (id: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        dispatch(toggleFollowingInProgress(true, id));\r\n        let response = await usersAPI.unFollow(id)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(unFollowSuccess(id))\r\n        }\r\n        dispatch(toggleFollowingInProgress(false, id));\r\n    }\r\n}\r\n\r\nexport default UsersPageReducer;\r\n","import React, {FC, useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\n\r\ntype UsersPageType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nexport const Paginator: FC<UsersPageType> = ({currentPage,\r\n                                                 pageSize,\r\n                                                 totalItemsCount,\r\n                                                 onPageChanged,\r\n                                                 portionSize= 20}) => {\r\n\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const portionCount = Math.ceil(pagesCount / portionSize);\r\n    const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const leftPortionNumber = (portionNumber -1) * portionSize + 1;\r\n    const rightPortionNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {setPortionNumber(portionNumber -1 )} }>prev</button> }\r\n        {pages\r\n            .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n            .map((p) => {\r\n                return <span key={p} className={(currentPage === p) ? styles.selectedPage : styles.pageNumber}\r\n                             onClick={() => {onPageChanged(p)}}>{p}</span>\r\n            })}\r\n        {/*<div>*/}\r\n        {/*    {pages.map(p => {*/}\r\n        {/*        return <span key={p} className={(currentPage === p) ? styles.selectedPage : ''}*/}\r\n        {/*                     onClick={() => {*/}\r\n        {/*                         onPageChanged(p)*/}\r\n        {/*                     }}>{p}</span>*/}\r\n        {/*    })}*/}\r\n        {/*</div>*/}\r\n        { portionCount > portionNumber &&\r\n        <button onClick={() => setPortionNumber(portionNumber + 1) }>next</button>}\r\n    </div>\r\n}\r\n","import React, {FC} from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport {UserType} from \"../../redux/usersPageReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\n\r\ntype UserPageType = {\r\n    userPhoto: string\r\n    followingInProgress: Array<number>\r\n    follow: (id: number) => void\r\n    unFollow: (id: number) => void\r\n    user: UserType\r\n}\r\n\r\nexport const User: FC<UserPageType> = ({user,  userPhoto, followingInProgress, follow, unFollow}) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}> <img className={styles.avatar}\r\n                                                                 src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                                                                 alt=\"smile\"/>\r\n                              </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed ?\r\n                            <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                    onClick={() => {\r\n                                        unFollow(user.id)\r\n                                    }}>UnFollow</button>\r\n\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div><div>{user.status}</div>\r\n                    </span>\r\n                </span>\r\n        </div>)\r\n\r\n}","import React, {FC} from \"react\";\r\nimport {UserType} from \"../../redux/usersPageReducer\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPageType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void // !!! includenly\r\n    users: Array<UserType>\r\n    userPhoto: string\r\n    followingInProgress: Array<number>\r\n    follow: (id: number) => void\r\n    unFollow: (id: number) => void\r\n}\r\n\r\nexport const Users: FC<UsersPageType> = ({\r\n                                             totalUsersCount, pageSize,\r\n                                             currentPage, onPageChanged,\r\n                                             users, userPhoto,\r\n                                             followingInProgress, follow, unFollow\r\n                                         }) => {\r\n\r\n    // let pageCount = Math.ceil(totalUsersCount / pageSize);\r\n    // let pages = [];\r\n    // for (let i = 1; i <= pageCount; i++) {\r\n    //     pages.push(i)\r\n    // }\r\n\r\n    return <div>\r\n\r\n        <Paginator totalItemsCount={totalUsersCount}\r\n                   pageSize={pageSize}\r\n                   currentPage={currentPage}\r\n                   onPageChanged={onPageChanged}/>\r\n        {\r\n            users.map(u => <User key={u.id}\r\n                                 user={u}\r\n                                 follow={follow}\r\n                                 unFollow={unFollow}\r\n                                 userPhoto={userPhoto}\r\n                                 followingInProgress={followingInProgress}/>)\r\n\r\n        }\r\n    </div>\r\n\r\n}\r\n","export default __webpack_public_path__ + \"static/media/preloader_spinner.b394a653.svg\";","import preloader_spinner from \"../../../assets/images/preloader_spinner.svg\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const Preloader = () => {\r\n    return <div style={{position: \"fixed\", top: \"50%\", textAlign: \"center\", width: \"55%\"}}>\r\n        <img src={preloader_spinner} style={{width: 100, backgroundColor: \"transparent\"}}/>\r\n    </div>\r\n}","import {RootReduxState} from \"./reduxStore\";\r\nimport {createSelector} from \"reselect\";\r\nimport {UserType} from \"./usersPageReducer\";\r\n\r\n\r\nconst getUsersSelector = (state: RootReduxState) => {\r\n   return  state.usersPage.users;\r\n}\r\n\r\nexport const getUsers =  createSelector(getUsersSelector, (users: Array<UserType>) => {\r\n    return users\r\n})\r\n\r\nexport const getUserPage = (state: RootReduxState) => {\r\n   return state.usersPage;\r\n}\r\n\r\nexport const getPageSize = (state: RootReduxState) => {\r\n    return  state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootReduxState) => {\r\n    return  state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: RootReduxState) => {\r\n    return  state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: RootReduxState) => {\r\n    return  state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: RootReduxState) => {\r\n    return  state.usersPage.followingInProgress;\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow,\r\n    followSuccess,\r\n    InitialType,\r\n    requestUsers,\r\n    setCurrentPage,\r\n    unFollow,\r\n    unFollowSuccess,\r\n    UserType\r\n} from \"../../redux/usersPageReducer\";\r\nimport {Users} from \"./Users\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {RootReduxState} from \"../../redux/reduxStore\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUserPage,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\ntype MSTPropsType = {\r\n    users: Array<UserType>\r\n    userPage: InitialType\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: 1 | number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\ntype MDTPropsType = {\r\n    followSuccess: (userId: number) => void\r\n    unFollowSuccess: (userId: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n    follow: (id: number) => void\r\n    unFollow: (id: number) => void\r\n}\r\n\r\nexport type UsersPropsType = MSTPropsType & MDTPropsType\r\n\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.requestUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    userPhoto = \"https://www.freeiconspng.com/uploads/smile-transparent-background-9.png\"\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users userPhoto={this.userPhoto}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   pageSize={this.props.pageSize}\r\n                   currentPage={this.props.currentPage}\r\n                   users={this.props.users}\r\n                   // followSuccess={this.props.followSuccess}\r\n                   // unFollowSuccess={this.props.unFollowSuccess}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   onPageChanged={this.onPageChanged}\r\n                   follow={this.props.follow}\r\n                   unFollow={this.props.unFollow}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootReduxState): MSTPropsType => {\r\n    return {\r\n        // users: getUsers(state),\r\n        users: getUsers(state),\r\n        userPage: getUserPage(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    (connect(mapStateToProps, {\r\n        followSuccess,unFollowSuccess, setCurrentPage, follow, unFollow, requestUsers})),\r\n    withAuthRedirect\r\n)(UsersContainer)\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\n\r\ntype StatusPropsType = {\r\n    status: string\r\n    updateUserStatus?: (status: string) => void\r\n}\r\n\r\nconst ProfileStatus = (props: StatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [status, setStatus] = useState<string>(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const editModeOn = () => {\r\n        setEditMode(true)\r\n        setStatus(props.status)\r\n    }\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    const updateStatus = () => {\r\n        setEditMode(false)\r\n       props.updateUserStatus && props.updateUserStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>{!editMode\r\n            ? <div>\r\n                <span onDoubleClick={editModeOn}>{props.status ? props.status : '----'}</span>\r\n            </div>\r\n\r\n            : <div>\r\n                <input value={status} onChange={onChange} autoFocus={true} onBlur={updateStatus}/>\r\n            </div>\r\n        }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatus","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileResponseType} from \"../../../redux/profilePageReducer\";\r\nimport ProfileStatus from \"./ProfileStatus\"\r\n\r\ntype profileInfoPropsType = {\r\n\r\n    profile: ProfileResponseType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: profileInfoPropsType) => {\r\n    if(!props.profile){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src=\"https://www.shutterstock.com/blog/wp-content/uploads/sites/5/2019/07/Man-Silhouette.jpg\" alt=\"\"/>\r\n            </div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={props.profile.photos.large}/>\r\n                AVA + description\r\n                <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import {profileAPI, usersAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./reduxStore\";\r\n\r\nconst ADD_POST = \"profile/ADD-POST\"\r\nconst SET_USER_PROFILE = \"profile/SET-USER-PROFILE\"\r\nconst SET_STATUS = \"profile/SET-STATUS\"\r\n\r\nlet initialState: InitialProfileStateType = {\r\n    posts: [\r\n        {id: 1, message: 'Hi', likesCount: 3},\r\n        {id: 1, message: 'How r u', likesCount: 5},\r\n        {id: 1, message: 'it\\'s my first post', likesCount: 13},\r\n        {id: 1, message: 'Любишь пёсиков? =)', likesCount: 33},\r\n        {id: 1, message: 'London is a capital of great Britain', likesCount: 7},\r\n        {id: 1, message: 'Live Belarus!', likesCount: 345}\r\n    ],\r\n    profile: null,\r\n    status: 'My status'\r\n}\r\n\r\nexport type InitialProfileStateType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileResponseType | null\r\n    status: string\r\n}\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport type ProfileResponseType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        github: string\r\n        instagram: string\r\n        mainLink: string\r\n        twitter: string\r\n        vk: string\r\n        website: string\r\n        youtube: string\r\n    }\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    photos: {\r\n        large: string\r\n        small: string\r\n    }\r\n    userId: number\r\n}\r\n\r\n\r\nconst profilePageReducer = (state: InitialProfileStateType = initialState, action: ActionsType): InitialProfileStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ADD_POST: {\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case SET_STATUS: {\r\n            return {\r\n                ...state, status: action.status\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof addPost>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\nexport const addPost = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText: newPostText\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: ProfileResponseType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\nexport type ThunkType = ThunkAction<void, RootReduxState, unknown, ActionsType>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data));\r\n    }\r\n\r\nexport const getUserStatus = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.getUserStatus(userId)\r\n        dispatch(setStatus(response.data));\r\n    }\r\n\r\nexport const updateUserStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status));\r\n            }\r\n}\r\n\r\nexport default profilePageReducer;","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\n\r\ntype PropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n    return <div className={classes.item}>\r\n        <div className={classes.imgWrapper}>\r\n            <img\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQS7mx3RJZKeLVTgpuTk5QXPOHvtHccgp2wRA&usqp=CAU\"\r\n                alt=\"Jang\"/>\r\n        </div>\r\n        <div className={classes.triangle}/>\r\n        <div className={classes.messageContent}>\r\n            {props.message}\r\n            <div className={classes.likes}>\r\n                likes:\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profilePageReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype PropsType = {\r\n    posts: PostType[]\r\n    addPost: (value: string) => void\r\n}\r\n\r\ntype FormDataType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\n\r\nconst MyPosts = React.memo((props: PropsType) => {\r\n\r\n    const postsElements = [...props.posts].reverse().map(p => <Post message={p.message} likesCount={p.likesCount}\r\n                                                     key={p.id}/>);\r\n\r\n    const addPost = (value: FormDataType) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n\r\n    return <div className={classes.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddPostReduxForm onSubmit={addPost}/>\r\n        <div className={classes.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n});\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newPostText\" placeholder=\"Enter ur message\"\r\n                       validate={[required, maxLength30]}/>\r\n            </div>\r\n            <div>\r\n                <button type='submit'>Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddPostReduxForm = reduxForm<FormDataType>({\r\n    form: \"profileAddPostForm\"\r\n})(AddPostForm)\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPost} from \"../../../redux/profilePageReducer\"\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"../../../redux/reduxStore\";\r\n\r\n\r\nlet mapStateProps = (state: RootReduxState) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\n/*let mapDispatchProps = (dispatch: Dispatch) => {\r\n    return{\r\n        addPost: (newPostText: string) => {dispatch(addPost(newPostText))},\r\n    }\r\n}*/\r\n\r\n\r\nconst MyPostsContainer = connect(mapStateProps,\r\n    {addPost}) (MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileResponseType} from \"../../redux/profilePageReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileResponseType | null\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return <div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n        <MyPostsContainer />\r\n    </div>\r\n}\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {getUserProfile, getUserStatus, ProfileResponseType, updateUserStatus} from \"../../redux/profilePageReducer\";\r\nimport {RootReduxState} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype ProfileMapStateToPropsType = {\r\n    profile: ProfileResponseType | null\r\n    status: string\r\n    authorizedUserId:  number | null\r\n    isAuth: boolean\r\n    // userId: number\r\n}\r\n\r\ntype RouteType = {\r\n    userId: string\r\n}\r\n\r\ntype ProfileOwnProps = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype PropsType = MapDispatchPropsType & ProfileMapStateToPropsType & RouteComponentProps<RouteType>\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = +this.props.match.params.userId;\r\n        if (!userId ) {\r\n            userId =this.props.authorizedUserId ?  this.props.authorizedUserId : 2;\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status} />\r\n        </div>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReduxState): ProfileMapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.authorization.id,\r\n    isAuth: state.authorization.isAuth\r\n\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<ProfileMapStateToPropsType, MapDispatchPropsType, ProfileOwnProps, RootReduxState>\r\n    (mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n    withAuthRedirect)(ProfileContainer)\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport classes from './Header.module.css';\r\n\r\ntype authPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: authPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img className={classes.picture}\r\n                 src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTjG-JZ1vOhYl5GhS0900uggNYgE6M7qWYNmw&usqp=CAU'/>\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>log out</button> </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {RootReduxState} from \"./reduxStore\";\r\nimport {stopSubmit} from \"redux-form\"\r\n\r\nconst SET_USER_DATA = 'auth/SET-USER-DATA';\r\n\r\n\r\n\r\nconst initialState: initialStateSetUserType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport type initialStateSetUserType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport const authReducer = (state: initialStateSetUserType = initialState, action: ActionsType) => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                ...action.payLoad\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (payLoad: initialStateSetUserType) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        payLoad\r\n    } as const\r\n}\r\n\r\n\r\n\r\nexport const getAuthUserData = () => async (dispatch: Dispatch) => {\r\n    let response =  await authAPI.me()\r\n            if (response.data.resultCode === 0) {\r\n                let {id, email, login} = response.data.data\r\n                dispatch(setAuthUserData({id, email, login, isAuth: true}))\r\n            }\r\n\r\n}\r\n\r\nexport type ThunkType = ThunkAction<void, RootReduxState, unknown, ActionsType>\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean)\r\n    : ThunkType => async (dispatch) => {\r\n\r\n   let response = await authAPI.login(email, password, rememberMe)\r\n\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData());\r\n            } else {\r\n                let message = response.data.messages.length > 0\r\n                    ? response.data.messages[0]\r\n                    :  'Some error'\r\n                dispatch(stopSubmit(\"login\", {_error: message}) as ActionsType);\r\n            }\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n   let response = await authAPI.logout()\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData({id: null, email: null, login: null, isAuth: false}))\r\n            }\r\n}\r\n\r\n","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"../../redux/reduxStore\";\r\nimport {getAuthUserData, logout} from \"../../redux/authReducer\";\r\n\r\n\r\n\r\nexport type mapStateToPropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport type authOwnPropsType = {\r\n    // getAuthUserData: () => void\r\n    logout: () => void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<authOwnPropsType & mapStateToPropsType> {   //??\r\n\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserData()\r\n    // }\r\n\r\n    render() {\r\n        return <Header {...this.props} /> //???\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReduxState):mapStateToPropsType => ({\r\n    login: state.authorization.login,\r\n    isAuth: state.authorization.isAuth\r\n})\r\n\r\n\r\nexport default  connect (mapStateToProps, {getAuthUserData, logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootReduxState} from \"../../redux/reduxStore\";\r\nimport styles from '../common/FormsControls/FormsControls.module.css'\r\n\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        <div>\r\n            {/*{createField('Email', 'email', [required], Input)}*/}\r\n            <Field placeholder={'Email'} name={'email'} validate={[required]} component={Input}/>\r\n        </div>\r\n        <div>\r\n            <Field placeholder={'Password'} name={'password'} type={'password'} validate={[required]} component={Input}/>\r\n        </div>\r\n        <div>\r\n            <Field component={Input} name={'rememberMe'} type={'checkbox'}/> Remember me\r\n        </div>\r\n        { error && <div className={styles.formSummaryError}>\r\n            {error}\r\n        </div> }\r\n        <div>\r\n            <button>Login</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\ntype LoginProps = {\r\n    isAuth: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\nconst Login = (props: LoginProps) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: RootReduxState) => ({\r\n    isAuth: state.authorization.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login}) (Login)","import {getAuthUserData} from \"./authReducer\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootReduxState} from \"./reduxStore\";\r\n\r\nconst INITIALIZED_SUCCESS = 'app/INITIALIZED_SUCCESS';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\ntype ActionType = ReturnType<typeof initializedSuccess>\r\n\r\nexport const appReducer = (state = initialState, action: ActionType) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case INITIALIZED_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS})as const\r\n\r\nexport type ThunkType = ThunkAction<void, RootReduxState, unknown, ActionType>\r\n\r\nexport const initializeApp = (): ThunkType =>\r\n    (dispatch) => {\r\n\r\n       let promise =  dispatch(getAuthUserData());\r\n       promise.then(() => {dispatch(initializedSuccess())})\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import {combineReducers, createStore, applyMiddleware, compose} from \"redux\";\r\nimport profilePageReducer from \"./profilePageReducer\";\r\nimport dialogsPageReducer from \"./dialogsPageReducer\";\r\nimport usersPageReducer from \"./usersPageReducer\"\r\nimport {authReducer} from \"./authReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport reducer, { reducer as formReducer } from \"redux-form\";\r\nimport {appReducer} from \"./appReducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    usersPage: usersPageReducer,\r\n    authorization: authReducer,\r\n    initialization: appReducer,\r\n    form: formReducer\r\n})\r\n\r\nexport type RootReduxState = ReturnType<typeof reducers>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n// const store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import React from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/NavBar/Navbar\";\r\nimport {HashRouter, Route} from \"react-router-dom\";\r\nimport Settings from \"./components/Settings/Settings\";\r\nimport Music from \"./components/Music/Music\";\r\nimport News from \"./components/News/News\";\r\n// import {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\r\n\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport store, {RootReduxState} from \"./redux/reduxStore\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/appReducer\";\r\nimport {Preloader} from './components/common/Preloader/Preloader';\r\nimport {withSuspense} from \"./hoc/WithSuspense\";\r\n\r\n\r\nexport type mapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\nexport type authOwnPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\r\n\r\n\r\nclass App extends React.Component<authOwnPropsType & mapStateToPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <HashRouter basename={process.env.PUBLIC_URL}>\r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer/>\r\n                    <Navbar/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path='/dialogs' render={withSuspense(DialogsContainer)}/>\r\n                        <Route path='/profile/:userId?' render={\r\n                            () => <ProfileContainer/>}/>\r\n                        <Route path='/users' render={\r\n                            () => <UsersContainer/>}/>\r\n                        <Route path='/login' render={\r\n                            () => <Login/>}/>\r\n                        <Route path='/news' component={News}/>\r\n                        <Route path='/music' component={Music}/>\r\n                        <Route path='/settings' component={Settings}/>\r\n                    </div>\r\n                </div>\r\n            </HashRouter>);\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReduxState): mapStateToPropsType => ({\r\n    initialized: state.initialization.initialized\r\n})\r\n\r\nlet AppContainer = compose(\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n\r\nlet MainApp = () => {\r\n    return <Provider store={store}>\r\n        <AppContainer/>\r\n    </Provider>\r\n}\r\nexport default MainApp;\r\n","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"../redux/reduxStore\";\r\n\r\n\r\nexport function withSuspense<T>(Component: ComponentType<T>) {\r\n\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props} />\r\n        </React.Suspense>\r\n    };\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport MainApp from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n        // <Provider store={store}>\r\n        //     <App />\r\n        // </Provider>\r\n\r\n     <MainApp/>,\r\n        document.getElementById('root'));\r\n\r\n\r\n\r\nreportWebVitals();\r\n\r\n\r\n\r\n\r\n","\r\nexport const required = (value: string) => {\r\n    if (value)  return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined\r\n}","import React from 'react';\r\nimport styles from './FormsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\n\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const Textarea: React.FC<FormControlPropsType & WrappedFieldProps> =\r\n    ({input, meta: {touched, error}, ...props}) => {\r\n\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={styles.formControl }>\r\n            <div>\r\n                <textarea  className={hasError && styles.formInputError}\r\n                    {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span className={styles.error}>{error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<FormControlPropsType & WrappedFieldProps> =\r\n    ({input, meta: {touched, error}, ...props}) => {\r\n\r\n        const hasError = touched && error\r\n\r\n        return (\r\n            <div className={styles.formControl}>\r\n                <div>\r\n                    <input  className={hasError && styles.formInputError}\r\n                        {...input} {...props}/>\r\n                </div>\r\n                {hasError && <span className={styles.error}>{error}</span> }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    export const createField = (placeholder: string, name: string, validators: Array<Function> | undefined, component: any) => {\r\n        return <Field placeholder={placeholder}\r\n                      name={name}\r\n                      validate={[validators]}\r\n                      component={component}/>\r\n    }","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1X5Nu\",\"messageContent\":\"Post_messageContent__3fTrS\",\"triangle\":\"Post_triangle__2SzdI\",\"likes\":\"Post_likes__1eolG\",\"imgWrapper\":\"Post_imgWrapper__3Y_qE\"};","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReduxState} from \"../redux/reduxStore\";\r\n\r\ntype MSTPType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst MSTP = (state: RootReduxState): MSTPType => {\r\n    return {\r\n        isAuth: state.authorization.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MSTPType) {\r\n        let {isAuth, ...restProps} = props;\r\n\r\n        if (!isAuth) return <Redirect to={'/Login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(MSTP)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1iGMV\",\"pageNumber\":\"Paginator_pageNumber__2DFBM\",\"selectedPage\":\"Paginator_selectedPage__39AJ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__11nWe\",\"loginBlock\":\"Header_loginBlock__3WAoE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3agKN\",\"posts\":\"MyPosts_posts__3K9Jr\"};"],"sourceRoot":""}